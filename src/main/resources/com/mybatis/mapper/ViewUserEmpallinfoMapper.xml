<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.icss.dao.ViewUserEmpallinfoMapper" >
  <resultMap id="BaseResultMap" type="com.icss.bean.ViewUserEmpallinfo" >
   <result column="eid" property="eid" jdbcType="INTEGER" />
    <result column="ename" property="ename" jdbcType="VARCHAR" />
    <result column="esex" property="esex" jdbcType="VARCHAR" />
    <result column="ebrithday" property="ebrithday" jdbcType="VARCHAR" />
    <result column="d_name" property="dName" jdbcType="VARCHAR" />
    <result column="ejob" property="ejob" jdbcType="VARCHAR" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="rdescription" property="rdescription" jdbcType="VARCHAR" />
    <result column="pdescription" property="pdescription" jdbcType="VARCHAR" />
  </resultMap>
   <insert id="insert" parameterType="com.icss.bean.ViewUserEmpallinfo" >
    insert into view_user_empinfo (ename, esex, ebrithday, 
      d_name, ejob, username, 
      rdescription, pdescription)
    values (#{ename,jdbcType=VARCHAR}, #{esex,jdbcType=VARCHAR}, #{ebrithday,jdbcType=VARCHAR}, 
      #{dName,jdbcType=VARCHAR}, #{ejob,jdbcType=VARCHAR}, #{username,jdbcType=VARCHAR}, 
      #{rdescription,jdbcType=VARCHAR}, #{pdescription,jdbcType=VARCHAR})
  </insert>
 <insert id="insertSelective" parameterType="com.icss.bean.ViewUserEmpallinfo" >
    insert into view_user_empinfo
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="ename != null" >
        ename,
      </if>
      <if test="esex != null" >
        esex,
      </if>
      <if test="ebrithday != null" >
        ebrithday,
      </if>
      <if test="dName != null" >
        d_name,
      </if>
      <if test="ejob != null" >
        ejob,
      </if>
      <if test="username != null" >
        username,
      </if>
      <if test="rdescription != null" >
        rdescription,
      </if>
      <if test="pdescription != null" >
        pdescription,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="ename != null" >
        #{ename,jdbcType=VARCHAR},
      </if>
      <if test="esex != null" >
        #{esex,jdbcType=VARCHAR},
      </if>
      <if test="ebrithday != null" >
        #{ebrithday,jdbcType=VARCHAR},
      </if>
      <if test="dName != null" >
        #{dName,jdbcType=VARCHAR},
      </if>
      <if test="ejob != null" >
        #{ejob,jdbcType=VARCHAR},
      </if>
      <if test="username != null" >
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="rdescription != null" >
        #{rdescription,jdbcType=VARCHAR},
      </if>
      <if test="pdescription != null" >
        #{pdescription,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="getOnlyHaveUser" resultMap="BaseResultMap" parameterType="java.lang.String">
	select 
	distinct `e`.`eid` AS `eid`,`e`.`ename` AS `ename`,`e`.`esex` AS `esex`,`e`.`ebrithday` AS `ebrithday`,`d`.`d_name` AS `dName`,`e`.`ejob` AS `ejob`,`u`.`username` AS `username`
	FROM
	empinfo AS e
	INNER JOIN department AS d ON e.did = d.did
	INNER JOIN users AS u ON e.eid = u.eid
	INNER JOIN userrole AS ur ON u.eid = ur.eid
	INNER JOIN roles AS r ON r.rid = ur.rid  ORDER BY d.did 
  </select>
    <select id="getNullUser" resultMap="BaseResultMap" parameterType="java.lang.String">
	SELECT
	distinct e.ename,e.esex,e.ebrithday,d.d_name,e.ejob,e.eid
	FROM
	empinfo e
	INNER JOIN department d ON e.did = d.did
	LEFT JOIN users u ON e.eid = u.eid
    LEFT JOIN userrole ur ON ur.eid = u.eid
	LEFT JOIN roles r ON ur.rid = r.rid
	LEFT JOIN rolepermission rp ON r.rid = rp.rid
	LEFT JOIN permissions p ON rp.pid = p.pid
	WHERE u.username is NULL ORDER BY d.did 
  </select>
   <select id="getInfoByEid" resultMap="BaseResultMap" parameterType="int">
	select 
	`e`.`eid` AS `eid`,`e`.`ename` AS `ename`,`e`.`esex` AS `esex`,`e`.`ebrithday` AS `ebrithday`,`d`.`d_name` AS `dName`,`e`.`ejob` AS `ejob`,`u`.`username` AS `username`
	FROM
	empinfo AS e
	INNER JOIN department AS d ON e.did = d.did
	INNER JOIN users AS u ON e.eid = u.eid
	where e.eid =  #{eid,jdbcType=INTEGER} 
  </select>
      <select id="getNullInfoByEid" resultMap="BaseResultMap" parameterType="int">
	SELECT
	e.ename,e.esex,e.ebrithday,d.d_name,e.ejob,e.eid
	FROM
	empinfo e
	INNER JOIN department d ON e.did = d.did
	LEFT JOIN users u ON e.eid = u.eid
	LEFT JOIN userrole ur ON ur.eid = u.eid
	LEFT JOIN roles r ON ur.rid = r.rid
	LEFT JOIN rolepermission rp ON r.rid = rp.rid
	LEFT JOIN permissions p ON rp.pid = p.pid
	WHERE u.username is NULL and e.eid = #{eid,jdbcType=INTEGER}
  </select>
     <select id="getHaveByrname" resultMap="BaseResultMap" parameterType="java.lang.String">
      <bind name="ename" value="'%'+ _parameter + '%'" />
	select 
	`e`.`eid` AS `eid`,`e`.`ename` AS `ename`,`e`.`esex` AS `esex`,`e`.`ebrithday` AS `ebrithday`,`d`.`d_name` AS `dName`,`e`.`ejob` AS `ejob`,`u`.`username` AS `username`,`r`.`description` AS `rdescription`
	FROM
	empinfo AS e
	INNER JOIN department AS d ON e.did = d.did
	INNER JOIN users AS u ON e.eid = u.eid
	INNER JOIN userrole AS ur ON ur.eid = u.eid
	INNER JOIN roles AS r ON ur.rid = r.rid
	where e.ename like  #{ename,jdbcType=VARCHAR} 
  </select>
     <select id="getNotHaveByrname" resultMap="BaseResultMap" parameterType="java.lang.String">
	 <bind name="ename" value="'%'+ _parameter + '%'" />
	  SELECT
	e.ename,e.esex,e.ebrithday,d.d_name,e.ejob,e.eid
	FROM
	empinfo e
	INNER JOIN department d ON e.did = d.did
	LEFT JOIN users u ON e.eid = u.eid
	LEFT JOIN userrole ur ON ur.eid = u.eid
	LEFT JOIN roles r ON ur.rid = r.rid
	LEFT JOIN rolepermission rp ON r.rid = rp.rid
	LEFT JOIN permissions p ON rp.pid = p.pid
	WHERE u.username is NULL and  e.ename like #{ename,jdbcType=VARCHAR}
  </select>
</mapper>